Databases, Cookies, and Sessions

1. After creating an application (i.e. To Do List in flask_practice)
    - notice how everytime you run the program, the list resets at 0
    - also all users will see the same data (a list of tasks)

2. Import Sessions

3. from flask_session import Session

4. include the below code right after "app = Flask(__name__)

app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

5. create conditions inside the home html route
    - if a list already exists in the session or not 

    Example:
    if "list_of_tasks" not in session:
        // create a new list in the session
        session["list_of_tasks"] = []
    // if the list_of_tasks is already in the session, then render the list in memory
    return render_template("index.html", list=session["list_of_tasks"])

6. ensure all variables in other html files are specific to that session

Example: 

list_item = request.form.get("task")
session["list_of_tasks"].append(list_item)

------------------------------------------------------------------------------------

SQL + Flask + Sessions

create a new folder (register)

create a database file --> lecture.db 

run "sqlite3 lecture.db"

CREATE TABLE 'registrants' {
    'id' INTEGER PRIMARY KEY,
    'name' VARCHAR(255),
    'email' VARCHAR(255)
    };

INSERT INTO registrants (name, email) VALUES ('Alice', 'alice@example.com');

double check the data --> SELECT * FROM registrants;

Create app.py and index.html while pulling database from SQL
    - import sqlite3
    - code the beginning of the flask app
    - create a connection to the data base INSIDE the function used --> conn = sqlite3.connect('lecture.db')
    - create the cursor to execute queries --> c = conn.cursor()
    - make the app and its routes
        - to execute queries --> rows = c.execute("SELECT * FROM registrants;")
    - reference the database like the below:

    <body>
        <h1>Registrants</h1>
        <ul>
            {% for row in rows %}
                <li>{{ row[1] }} ({{ row[2] }})</li>
            {% endfor %}
        </ul>
    </body>


Adding more registrants form the application
- create a registration page html
- add the function to add more data (register) into the app.py
    create a form type in html to submit data like the below

        <form action="/" method="POST">
            <input type="text" name="name" placeholder="Input name here">
            <input type="text" name="email" placeholder="Input email address here">
            <input type="submit">
        </form>

    import request into the app.py

    create the function using methods POST and GET in app.py, like the below
        --> remember to execute a SQL query here to add in the new data

@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "GET":
        return render_template("register.html")
    else:
        name = request.form.get("name")
        email = request.form.get("email")
        c.execute("INSERT INTO registrants (name, email) VALUES (?,?)", (name, email))
        conn.commit()
        return redirect("/")


Miscellaneous tips: What to do if someone did not fill a text box
- create another html file to display a {{ message }}
- inside app.py follow the code below:

