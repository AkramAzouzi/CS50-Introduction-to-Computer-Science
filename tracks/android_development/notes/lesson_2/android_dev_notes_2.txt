Lesson 2: PokeDex

Starting an App
1. Open Adroid Studio
2. Empty Activity
3. Name --> Name of App
4. Package name --> domain name reversed
5. Location --> create a folder
6. Language --> Java
7. Minimum API Level recommended Lollipop
8. Finish

----------------------------------------------------------

Tip: Checkout layouts and views --> app -> res -> layout -> Activity
    - best to keep layout width and height at "match_parent"
    - best to keep text width and height at "wrap_content"

----------------------------------------------------------

Tip: What is a Gradle --> The build system for Android. The wrapper around the java compiler that holds code 
    - most important --> dependencies section

----------------------------------------------------------

Recycler View --> Long list of Pokemon on the Screen
1. Add recycler view to application.
    - Gradle Scripts --> build.gradle (module app)
    - under implementation 'androidx.constraintlayout:constraintlayout:1.1.3', make a new line
    - input --> implementation 'androidx.recyclerview:recyclerview:1.0.0' (usually found in the documentation)
    - click sync now --> ensure you get all green check marks

----------------------------------------------------------

Modifying the View
1. Open activity_main.xml from res/layout --> click "split" at the top right
2. Right above <TextView  --> <recyclerview and then press tab
3. In layout_width --> match_parent (to fill entire screen)
4. In layout_height --> match_parent
5. delete the entire text view
6. Add an ID to the recycler view
    - This is a unique identifier to access an object that represents this view
    - under layout_height  --> "android:id="@+id/recycler_view"

----------------------------------------------------------

Define what each row will look like --> Second layout
1. control click on layout
2. new --> layout resource file
3. file name --> pokedex_row
4. LinearLayout
5. click ok
6. this will make a new xml file.
7. Open the new XML file and match the below code:

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:id="@+id/pokedex_row">
    <TextView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:id="@+id/pokedex_row_text_view" />

</LinearLayout>

----------------------------------------------------------

The Model 
1. go back to app folder
2. control click the top folder and create a new Java Class
3. Create the classes that will be used in the app. For example:

package io.gianmillare.pokedex;

public class Pokemon {
    private String name;
    private int number;

    Pokemon(String name, int number) {
        this.name = name;
        this.number = number;
    }

    public String getName() {
        return name;
    }

    public int getNumber() {
        return number;
    }
}

----------------------------------------------------------

The Model part 2 (pokedexadapter)
1. under app, control click to make another Java Class
2. follow the below code exmaple:

package io.gianmillare.pokedex;

import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;

import androidx.recyclerview.widget.RecyclerView;

PLEASE NOTE: Some of the classes will appear "red" or grayed out because they will be create in a later step.
public class PokedexAdapter extends RecyclerView.Adapter<PokedexAdapter.PokedexViewHolder> {
    private static class PokedexViewHolder extends RecyclerView.ViewHolder {
        public LinearLayout containerView;
        public TextView textView;

        PokedexViewHolder(View view) {
            super(view);
            containerView = view.findViewById(R.id.pokedex_row);
            textView = view.findViewById(R.id.pokedex_row_text_view);
        }
    }
}

----------------------------------------------------------

OnCreate 

1. once you've created the above code, continue from below the PokedexViewHolder
2. start by typing "oncreate" and tab. This will generate the below code. (delete "return null")

    @NonNull
    @Override
    public PokedexViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        return null;
    }

3. Follow the below code example:

    @NonNull
    @Override
    public PokedexViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.pokedex_row, parent, false);

        return new PokedexViewHolder(view);
    }

----------------------------------------------------------

OnBind

1. underneath the oncreate, type onbind and press tab. The below code should formulate

    @Override
    public void onBindViewHolder(@NonNull PokedexViewHolder holder, int position) {

    }

2. Start creating data for the onbind view to display
    - hard coding the data
    - right above the oncreate view, start hard coding the data of Pokemon
    - Example:

        private List<Pokemon> pokemon = Arrays.asList(
            new Pokemon("Bulbasaur", 1),
            new Pokemon("Ivysaur", 2),
            new Pokemon("Venasaur", 3)
    );

PLEASE NOTE: we will learn how to import data in a seprate lesson. This is just how to hard code the data

3. return to the onbind code
4. follow the below code as an example:

    @Override
    public void onBindViewHolder(@NonNull PokedexViewHolder holder, int position) {
        Pokemon current = pokemon.get(position);
        holder.textView.setText(current.getName());
    }

----------------------------------------------------------

How many rows to display
1. create row for the list which is the equivalent size of the pokemon's data

    @Override
    public int getItemCount() {
        return pokemon.size();
    }

----------------------------------------------------------

Use the Adapter
1. add the views you created to the MainActivity.java file

public class MainActivity extends AppCompatActivity {
    private RecyclerView recyclerView;
    private RecyclerView.Adapter adapter;
    private RecyclerView.LayoutManager layoutManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}

2. add the views just below, under the OnCreate class

public class MainActivity extends AppCompatActivity {
    private RecyclerView recyclerView;
    private RecyclerView.Adapter adapter;
    private RecyclerView.LayoutManager layoutManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        recyclerView = findViewById((R.id.recycler_view));
        adapter = new PokedexAdapter();
        layoutManager = new LinearLayoutManager(this);

        recyclerView.setAdapter(adapter);
        recyclerView.setLayoutManager(layoutManager);
    }
}

3. Run the program

----------------------------------------------------------

Create a new activity to pop up when one of the pokemon are selected
1. control click java app --> New -->  Activity --> Empty Activity
2. locate the new xml file created under res --> layout
3. Customize the XML file to change the appearance
    - add two textviews
    - add padding and content
    - follow the below example

    <?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".PokemonActivity">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:id="@+id/pokemon_name"
        android:textAlignment="center"
        android:textSize="18dp"
        android:paddingTop="10dp" />
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:id="@+id/pokemon_number"
        android:textAlignment="center"
        android:textSize="16dp"
        android:paddingTop="5dp" />

</LinearLayout>

4. Return to the newly created Activity file
    - add the two views created above
    - add the values to the OnCreate class
    - follow the below code

    package io.gianmillare.pokedex;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.widget.TextView;

public class PokemonActivity extends AppCompatActivity {
    private TextView nameTextView;
    private TextView numberTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_pokemon);

        String name = getIntent().getStringExtra("name");
        int number = getIntent().getIntExtra("number", 0);

        nameTextView = findViewById(R.id.pokemon_name);
        numberTextView = findViewById(R.id.pokemon_number);

        nameTextView.setText(name);
        numberTextView.setText(Integer.toString(number));
    }
}

----------------------------------------------------------

Implement a way to pass data form the first Activity to the second Activity
1. Go back to the Pokemon Adapter (where you have the list of data)
    - this is in the OnBind view holder
2. Add the below code to the onBindViewHolder

    @Override
    public void onBindViewHolder(@NonNull PokedexViewHolder holder, int position) {
        Pokemon current = pokemon.get(position);
        holder.textView.setText(current.getName());

        holder.containerView.setTag(current);
    }

----------------------------------------------------------

Create an event handler
1. under PokemonViewHolder, create a OnClickListener
2. then create an OnClick class, follow the below code

public class PokedexAdapter extends RecyclerView.Adapter<PokedexAdapter.PokedexViewHolder> {
    public static class PokedexViewHolder extends RecyclerView.ViewHolder {
        public LinearLayout containerView;
        public TextView textView;

        PokedexViewHolder(View view) {
            super(view);
            containerView = view.findViewById(R.id.pokedex_row);
            textView = view.findViewById(R.id.pokedex_row_text_view);

            containerView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    Pokemon current = (Pokemon) containerView.getTag();
                    Intent intent = new Intent(view.getContext(), PokemonActivity.class);
                    intent.putExtra("name", current.getName());
                    intent.putExtra("number", current.getNumber());

                    view.getContext().startActivity(intent);
                }
            });
        }
    }