Lesson 5: 

*** Save data to the users device from your app, using SQLite ***

Examples of SQLite Queries:

CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT
    name TEXT
)
---------
INSERT INTO users (name)
VALUES ('Tommy')
---------
SELECT * FROM users
WHERE name = 'Tommy'
---------
UPDATE users
SET name = 'Tommy M'
WHERE name = 'Tommy'
---------

Making the app

1. Add the views (Recycler View)

Because we are using Recycler view, first add the Recycler View dependency to your build.gradle app file
implementation 'com.android.support:recyclerview-v7:28.0.0'

then Refactor --> AndroidX

Delete the TextView in activity_main.xml and replace with recyclerview

    <androidx.recyclerview.widget.RecyclerView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:id="@+id/recycler_view"/>

2. Create an Adapter to manage the data inside the RecyclerView

In the same folder as MainActivity.java, create a new file named NotableAdapter
control + click the folder --> New Class 
In the same folder as activity_main.xml, create a new xml file for the adapters layout 
res --> layout --> control + click the folder --> New --> Layout Resource file --> 'notable_row' --> LinearLayout

3. Modify the notable_row file

add an ID and add a TextView
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical" android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:id="@+id/notable_row">
    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:id="@+id/notable_row_text" />

</LinearLayout>

4. Modify the NotableAdapter file

extend the RecyclerView.Adapter and create the Class
public class NotableAdapter extends RecyclerView.Adapter<NotableAdapter.NoteViewHolder> {
    public static class NoteViewHolder extends RecyclerView.ViewHolder {
        LinearLayout containerView;
        TextView textView;

        NoteViewHolder(View view) {
            super(view);

            containerView = view.findViewById(R.id.notable_row);
            textView = view.findViewById(R.id.notable_row_text);
        }
    }
}

5. The 3 Guidelines to ViewHolders

    *** Begin under the public class NoteViewHolder

    I. Create the ViewHolder 
        type oncreate and tab to autocomplete the onCreateViewHolder code 
        this portion requires inflating the context and layout

    @NonNull
    @Override
    public NoteViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.notable_row, parent, false);
        return new NoteViewHolder(view);
    }

    II. Bind the ViewHolder  
        Using Android Studio's Room Persistence Library

        copy the gradle file via documentation
    
    implementation "androidx.room:room-runtime:2.2.5"
    annotationProcessor "androidx.room:room-compiler:2.2.5"
    Sync

    Create a new model class
    control +click on app folder --> New --> Java Class --> 'Note'
    create the class with id and contents of the Note include annotations:
        Primary KEY
        Column info
        Entity
    
//This will create a table consisting of two columns: id and contents
@Entity(tableName = "notes")
public class Note {
    @PrimaryKey
    public int id;

    @ColumnInfo(name = "contents")
    public String contents;
}

    Add the new model (above) to the NotableAdapter

    right before the onCreateViewHolder:
    private List<Note> notes = new ArrayList<>();

    Now, you can create the onBindViewHolder right after the onCreateViewHolder:
    @Override
    public void onBindViewHolder(@NonNull NoteViewHolder holder, int position) {
        Note current = notes.get(position);
        holder.textView.setText(current.contents);
    }

    III. Find the number of items in the list
    use getItemCount

    @Override
    public int getItemCount() {
        return notes.size();
    }

6. Add the necessary classes to MainActivity

    in MainActivity

    create a RecyclerView
    create the NotableAdapter
    create LayoutManager

    inside onCreate:
    add recyclerview, LayoutManager, and Adapter
    set the above 
    view the below

    public class MainActivity extends AppCompatActivity {
    private RecyclerView recyclerView;
    private NotableAdapter adapter;
    private RecyclerView.LayoutManager layoutManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        recyclerView = findViewById(R.id.recycler_view);
        layoutManager = new LinearLayoutManager(this);
        adapter = new NotableAdapter();

        recyclerView.setLayoutManager(layoutManager);
        recyclerView.setAdapter(adapter);
    }
}

7. Class DAO (Data Access Object): Write model to do three things
This also uses the Room Persistence Library

I. Create a new note
    Create New JavaClass --> NoteDao
    change class to interface
    add annotation @DAO
    add annotation @Query(SQL Code)
        --> @Query(INSERT INTO notes (contents) VALUES ('New note)" )
    void create() --> method to create a note

II. Obtain Already created notes
    under the above code
    add annotation @Query()
        --> @Query("SELECT * FROM notes")
    List<Note> getAllNotes();

III. Saving a note to the Disk
    under the above code

    add annotation @Query
        --> ("UPDATE notes SET contents = :contents WHERE id = :id")
        *** This is called parameter binding ***
    void save(String contents, int id)

Follow the below code:

@Dao
public interface NoteDao {
    @Query("INSERT INTO notes (contents) VALUES ('New note')")
    void create();

    @Query("SELECT * FROM notes")
    List<Note> getAllNotes();

    @Query("UPDATE notes SET contents = :contents WHERE id = :id")
    void save(String contents, int id);
}

8. Create a database class to access the DAO
    create new class --> NotesDatabase
    add annotation @Database(entities = {NoteDao.class}, version = 1)
    .... public class.....

    extend the RoomDatabase
    add abstract to the public class (public abstract class)
    *** abstract classes will allow the room library to generate usable code without us having to write it. ***
    add another abstract class inside the first abstract class
        public abstract NoteDao noteDao();

@Database(entities = {NoteDao.class}, version = 1)
public abstract class NotesDatabase extends RoomDatabase {
    public abstract NoteDao noteDao();
}


9. Use the Model code in the applicaiton
go back into MainActivity
define an object representing a connection to the database
    public static NotesDatabase database;

set database value, follow the below code
database = Room.databaseBuilder(getApplicationContext(), NotesDatabase.class, "notes").allowMainThreadQueries().build();

go to NotableAdapter --> pull all data from DAO
create new method to load everything from database --> named "reload"
follow the below code

    public void reload() {
        notes = MainActivity.database.noteDao().getAllNotes();
        notifyDataSetChanged();
    }

go back to MainActivity
inside the onCreateViewHolder
add the code you made in the Adapter, follow the below code:
    adapter.reload();

10.

