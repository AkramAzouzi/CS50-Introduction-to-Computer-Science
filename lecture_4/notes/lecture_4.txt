Lecture 4: Memory

Hexidecimal --> 0-9, A-F where F represents 15
    - 09 --> bit representing 9
    - 0F --> bit representing 15
    - 10 --> bit represents 16
    - FF --> 255
    - the notation "0x" defines a hexidecimal number

RGB --> red, green, blue
    - also represented by numbers where:
        - 00 00 00 --> 0red, 0green, 0blue --> Black
        - FF FF FF --> 255 red, green, blue --> white

Syntax of a hexidecimal
- when coding a hexidecimal value
    - assign an integer
    - printf using syntax %p with pointer to "&"
        - "&" called the address operator
        - "*&" called the go-to-that-address operator

Logic behind pointers and address-of syntax
- string s = "EMMA"
    - can also be written as char *s = "EMMA"
- You can create a new type of value using typedef
    - typedef char *string;
    - This syntax can effectively replace some of the "training wheels" provided in <cs50.h>


Pointer Arithmetic --> Conventional method
int main(void)
{
    char *s = "EMMA";
    printf("%s\n", s);
    printf("%p\n", s); // --> returns the hexidecimal value of "E" --> 0x400704
    printf("%p\n", &s[0]); // --> returns the same as above, hexidecimal value of "E" --> 0x400704
    printf("%p\n", &s[1]); // --> this and the below will return the hexidecimal value of all "EMMA" --> 0x400705
    printf("%p\n", &s[2]); // --> 0x400706
    printf("%p\n", &s[3]); // --> 0x400707
    printf("%c\n", *s); // --> this will got to the value that matches the hexidecimal value, or go to the go to --> "E"
    printf("%c\n", *(s+1)); // --> this and the below will return the element that matches the hexidecimal value --> "M"
    printf("%c\n", *(s+2)); // --> "M"
    printf("%c\n", *(s+3)); // --> "A"
}



Pointer Rules: Strings
// From lecture_4 Part 2 Compare
// Example 3: Even when passed the same value, strings are not equivalent because they are stored in different memory
int main(void)
{
    char *i = get_string("i: ");
    char *j = get_string("j: ");

    printf("%p\n", i); // --> input:Emma --> This returns a location of 0xb28670
    printf("%p\n", j); // --> input:Emma --> This returns a location of 0xb286b0
}



Pointer Rules: Work around using Memory Allocation --> malloc() by library stdlib.h
From lecture_4 Part 3
int main(void)
{
    char *s = get_string("s: ");

    char *t = malloc(strlen(s) + 1);

    for (int i = 0, n = strlen(s); i < n + 1; i++) // we add +1 to i < n because we need to include the null operator at the end
    {
        t[i] = s[i];
    }

    t[0] = toupper(t[0]);

    printf("%s\n", s);
    printf("%s\n", t);
    // string s is still lowercase as we change string t to uppercase.
}




Valgrind
--> used to debug any excess memory being used, and to potentially find any memory leaks
--> refer to Part 4 in lecture 4




Swap & Empty Variables/Temps
- As mentioned in lecture_4.c, applying a function "swap(a,b)" will not work when called in the "main"
- This is because the variables are stored inside the computer's stack which acts from the "bottom up"
- The variables in the main function is stored at the very bottom, lets call them x and y
- The variables used inside the swap function are used after the main function, as called a and b
- when the main function is called, the variables in the main function are called first, and then the variables in the swap function
- but what you'll notice is that the swap function were used on variables a and b and not x and y; x and y are not swapped
- this is why the swap function does not work when created outside of the main functions

SOLUTION: This can be fixed by using Pointers and Addresses --> a will point to x and b will point to y, rather than a = x and b = y
- Refer to lecture_4.c Part 5: Swap & Empty Variables/Temp




Reading Files and File Functions
- you can write, read, and append files.
- refer to the example below:

// Writing/updating the csv file via this program/code --> will write in any inputs into a new file called "Phonebook"
int main(void)
{
    // Open File
    FILE *file = fopen("phonebook.csv", "a"); // r = read, w = write, a = append

    // get strings from user
    char *name = get_string("Name: ");
    char *number = get_string("Number: ");

    // Print / write strings of file
    fprintf(file, "%s, %s\n", name, number);

    // close the file
    fclose(file);
}




-------------SHORTS---------------
Hexidecimal

- 0123456789ABCDEF --> BASE 16
- where a b c d etc represent 10 11 12 13 etc until F == 15
- We use this because hexidecimal system is a power of 2 (using base 16)
- Hexidecimal is usually preceded by "0x"
- Binary is 1,2,4,8
- decimal is 1, 10, 100, 1000
- Hexidecimal is 1, 16, 256 --> 0x397 where 3 = 256, 9 = 16, 7 = 1
- when given a 32 digits number --> separate the digits into 8 groups of 4
    - Example --> 0100 0110 1010 0010 1011 1001 0011 1101 --> go from right to left
    - 1101 --> 8401 --> 13 --> 0xD
    - 0011 --> 0021 --> 3 --> 0x3
    - 1001 --> 8001 --> 9 --> 0x9
    - 1011 --> 8021 --> 11 --> 0xB
    - 0010 --> 0020 --> 2 --> 0x2
    - 1010 --> 8020 --> 10 --> 0xA
    - 0110 --> 0420 --> 6 --> 0x6
    - 0100 --> 0400 --> 4 --> 0x4
    --> Answer --> reverse the answers above --> 0x46A2B93D




Pointers

- provide a difference way to pass data between functions
    - we usually pass data by value
    - when we pass  data by value, we only pass a copy of that data
    - if we use pointers instead of the variable itself, we have the ability to change the variable itself instead of a copy
- Pointer Basics
    - All computers have a hard drive to store memory
    - these disk drives are storage spaces, we cant directly work with this disk storage.
    - But we can access the RAM, where we can move and change data
    - Memory is basically a huge array of 8-bit wide bytes
        - Data types and sizes:
            - integer (int) --> 4
            - char --> 1
            - float --> 4
            - double --> 8
            - long long --> 8
            - string --> 1 byte per character + 1 NULL ending character
    - every element of an array has an index (or address) location.
    - IMPORTANT --> Pointer is nothing more than an address (a location to memory where addresses live)
        - a pointer is a data item with a value that is a memory address
        - a pointer describes the data located at the memeory address
        - as such, pointers allow data structures and variables to be shared among functions
    - Types of pointers
        - simplest pointer available is the NULL pointer
            - when you create a pointer and you dont set its value immediately, you should always set it to NULL
            - check a pointers value if its NULL by using the equality operator (==)
        - Extracting pointer
            - extracting the address of an already existing variable. You cand o this by using &
            - &x is the address of variable x
            - for an arr, we can get the address of the ith character of an array using the syntax &arr[i]
                - &arr[0] would then be the address of the first variable of the array
    - the main purpose of a pointer is to allow us to modify or inspect the location to which it points
        - we do this by dereferencing the pointer
    - for an integer pc, if we add a * to pc to become *pc, we get the hexidecimal data type of that integer --> *pc = 10 --> "A"
    - * is the dereference operator
        - it means "go to" referencing a variable.
    - in other words, & is a reference to the hexidecimal value "0x1234" and * is a true reference where you visit the value "A" or "B"
    - Examples: int *p;
        --> the value of p is an address
        --> we can dereference p with the * operator
        --> This will return the location of an int.
    - Example: *pk = 35;
        --> * is a dereference operator
        --> go to the address
        --> similar to saying k = 35
    - Example: int m;
        --> m = 4
        --> pk = &m;
        --> this is getting the address rather than going to the address.




Dynamic Memory Allocation

- using pointers to get access to a block of dynamically-allocated memory
- this memory comes from the area of a hard drive called the "heap"
- all memory we've been working with has been coming from a pool of memory known as the stack
- heap works from the top to bottom
- stack works from the bottom to the top
- heap and stack are not separated, they work off the same pool of memory
- malloc()
    - this is a function to a lobrary that we can use to request a number of bytes
    - malloc() returns a pointer to that memory
    - if there is no more memory available, malloc() will return NULL;
    - Statically obtain an integer
        - int x;
    - Dynamically obtain an integer
        - int * px = malloc(sizeof(int));
    - getting in integer from the user
        - int x = getint();
    - array of floats on the stack
        - float stack_array[x]
    - array of floats on the heap
        - float* heap_array = malloc(x * sizeof(float));
- when dynamically memory allocated, it is best to free() the memory after use to use memory in a different program
    - this removes any potential memory leaks
    - Example: char* word = malloc(50 * sizeof(char));
        - do something with the above
        - once done using --> free(word)
- Three Golden Rules
    1) Every block of memory that you malloc() must subsequently be free()d
    2) only memory that you malloc() should be free()d
    3) do not free() something twice.

    - Example: int *b = malloc(sizeof(int));
        - this creates one box in stack memory and another box in heap memory
        - this creates a pointer b that points to empty memory box from malloc()
        - Example:
            - m = 10
            - *b = m + 2
            - this places "12" inside the reference box b, where we applied the malloc() function
    - Examples:
        - int m;
        - int *a;
        - a = &m --> variable a is pointing to the variable m --> returns an interchangeable value of m





Call Stacks --> The concept of Recursion
- when you call a function, the system will set a side the needed frame in memory
- lets say we have main(), move(), copy()
    - the active frames are located at the top of the stack while other functions wait to be called.
- When a new function is called, a new frame is pushed onto the top of the stacl and becomes the active frame
- When a function finishes its work, the frame is popped off of the stacl and the frame immediately below it becomes the new function
- The new function will pick up where the previous function left off
- This is how recursion works because as a function calls itself, the previous cycle of calls to the function are paused until
    --> the final function is called, then releases the previous functions results.
    - Example: Recursion Stacks
        --> int fact(int n)
            {
                if (n == 1)
                {
                    return 1;
                }
                else
                {
                    return n * fact(n-1);
                }
            }

            int main(void)
            {
                printf("%i\n", fact(5));
            }

    - the stack goes as follows
        --> main() is at the bottom
        --> ontop of main is printf, and main() is now on pause
        --> printf doesnt know what to print, so it goes on pause
        --> fact(5) is now called on top of printf
        --> according to the fact() function, because fact(n) does not equal 1
            --> skips over fact(5) and runs the "else" function
            --> return n * fact(n-1); --> n * fact(4), but we dont know what fact(4) is so now fact(4) is on pause as well
        --> fact(4) is now on top of fact(5)
        --> fact(3) is now on top of fact(4)
        --> fact(2) is now on top of fact(3)
        --> fact(1) is now on top of fact(2)
        --> once fact(1) is called, the stack releases, and fact(1) returns 1
        --> this launches the frame below it which is fact(2)
        --> fact(2) is now unpaused and launches the else function which we now have the value of fact(n-1)
            --> fact(2) = n * fact(n-1) --> 2 * fact(1) --> fact(1) = 1, so 2 * 1 --> fact(2) = 2
        --> once fact(2) is found it launches the next stack
        --> fact(3) is launched, then fact(4), then fact(5)




File Pointers
- the ability to read data from and write data to files is the primary means of storing persistent data
- persistent data: data that does not disappear when your program stops running
- the abstraction of files provided by C is implemented in a data structure called FILE --> stdio.h
    --> stdio.h accepts FILE* as ont of their parameters
    --> fopen() is a pointer to a file
- Operations --> "r" for read, "w" for write, "a" for append
- 6 common input/output functions (I/O)
    1) fopen() --> opens a file and returns a file pointer to it. always check the return value to make sure its not NULL
        --> Example: FILE* ptr = fopen(<filename>, <operations>);
    2) fclose() --> closes the file pointed to by the given file pointer
        --> Example: fclose(<filepointer>);
    3) fgetc(): reads and returns the next character from the file pointed to. The operations MUST be "r"
        --> Example: char ch = fgetc(<file pointer>);
    --> Using the above three I/O functions
        --> char ch;
            while ((ch = fgetc(ptr)) != EOF) // End of File
                printf("%c",ch);
        --> the above code reads a file and compares a character to the end of the file
        --> In other words, this program COPIES AN ENTIRE FILE
    4) fputc(): writes or appends the specified character to the pointed-to file. Must be "w" or "append"
        --> Example: fputc(<character>, <file pointer>); --> writes the character into the file that is being pointed to
    5) fread(): reads units of size from the file pointed to and stores them in memory in a buffer (an array) pointed to by <buffer>
        --> Example: fread(<buffer>, <size>, <qty>, <file pointer>);
        --> Example: int arr[10];
            -->fread(arr, sizeof(int), 10, ptr);
        --> file to the buffer
    6) fwrite(): writes units of size from the file pointed to and stores them in memory in a buffer (an array) pointed to by <buffer>
        --> Example: fwrite(<buffer>, <size>, <qty>, <file pointer>);
        --> Example: int arr[10];
            -->fwrite(arr, sizeof(int), 10, ptr);
        --> buffer to the file